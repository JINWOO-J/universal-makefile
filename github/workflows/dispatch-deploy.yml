name: 중앙화된 CI/CD 러너

on:
  repository_dispatch:
    types: [deploy]

env:
  # 기본 환경 변수
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  validate-payload:
    name: 페이로드 검증
    runs-on: ubuntu-latest
    outputs:
      source_repo: ${{ steps.validate.outputs.source_repo }}
      ref: ${{ steps.validate.outputs.ref }}
      version: ${{ steps.validate.outputs.version }}
      service_kind: ${{ steps.validate.outputs.service_kind }}
      environment: ${{ steps.validate.outputs.environment }}
      valid: ${{ steps.validate.outputs.valid }}
    
    steps:
      - name: 페이로드 검증
        id: validate
        run: |
          echo "=== Repository Dispatch 페이로드 검증 ==="
          
          # 필수 필드 확인
          SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
          REF="${{ github.event.client_payload.ref }}"
          VERSION="${{ github.event.client_payload.version }}"
          SERVICE_KIND="${{ github.event.client_payload.service_kind }}"
          ENVIRONMENT="${{ github.event.client_payload.environment }}"
          
          echo "source_repo: $SOURCE_REPO"
          echo "ref: $REF"
          echo "version: $VERSION"
          echo "service_kind: $SERVICE_KIND"
          echo "environment: $ENVIRONMENT"
          
          # 필수 필드 검증
          if [[ -z "$SOURCE_REPO" || -z "$REF" || -z "$VERSION" || -z "$SERVICE_KIND" || -z "$ENVIRONMENT" ]]; then
            echo "❌ 필수 페이로드 필드가 누락되었습니다."
            echo "필수 필드: source_repo, ref, version, service_kind, environment"
            exit 1
          fi
          
          # service_kind 검증
          if [[ "$SERVICE_KIND" != "fe" && "$SERVICE_KIND" != "be" ]]; then
            echo "❌ service_kind는 'fe' 또는 'be'여야 합니다."
            exit 1
          fi
          
          # environment 검증
          if [[ "$ENVIRONMENT" != "prod" && "$ENVIRONMENT" != "staging" ]]; then
            echo "❌ environment는 'prod' 또는 'staging'이어야 합니다."
            exit 1
          fi
          
          # 출력 설정
          echo "source_repo=$SOURCE_REPO" >> $GITHUB_OUTPUT
          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "service_kind=$SERVICE_KIND" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT
          
          echo "✅ 페이로드 검증 완료"
      
      - name: Slack 알림 - 시작
        if: vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚀 배포 시작",
              "attachments": [{
                "color": "#36a64f",
                "fields": [
                  {"title": "소스 저장소", "value": "${{ steps.validate.outputs.source_repo }}", "short": true},
                  {"title": "버전", "value": "${{ steps.validate.outputs.version }}", "short": true},
                  {"title": "서비스", "value": "${{ steps.validate.outputs.service_kind }}", "short": true},
                  {"title": "환경", "value": "${{ steps.validate.outputs.environment }}", "short": true},
                  {"title": "참조", "value": "${{ steps.validate.outputs.ref }}", "short": false},
                  {"title": "워크플로우", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
                ]
              }]
            }'

  build:
    name: 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: validate-payload
    if: |
      needs.validate-payload.outputs.valid == 'true' &&
      (needs.validate-payload.outputs.ref == 'refs/heads/main' ||
       needs.validate-payload.outputs.ref == 'refs/heads/develop' ||
       startsWith(needs.validate-payload.outputs.ref, 'refs/heads/ci/'))
    
    outputs:
      image_tag: ${{ steps.build-vars.outputs.image_tag }}
      build_version: ${{ steps.build-vars.outputs.build_version }}
      build_commit: ${{ steps.build-vars.outputs.build_commit }}
    
    env:
      SOURCE_REPO: ${{ needs.validate-payload.outputs.source_repo }}
      REF: ${{ needs.validate-payload.outputs.ref }}
      VERSION: ${{ needs.validate-payload.outputs.version }}
      SERVICE_KIND: ${{ needs.validate-payload.outputs.service_kind }}
      ENVIRONMENT: ${{ needs.validate-payload.outputs.environment }}
    
    steps:
      - name: 러너 저장소 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: 소스 코드 가져오기
        run: |
          echo "=== 소스 코드 가져오기 ==="
          make git-fetch \
            SOURCE_REPO=$SOURCE_REPO \
            REF=$REF \
            CLEAN=true
      
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3
      
      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY || 'docker.io' }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 빌드 환경 변수 설정
        id: build-vars
        run: |
          echo "DOCKER_REGISTRY=${{ vars.DOCKER_REGISTRY || 'docker.io' }}" >> $GITHUB_ENV
          echo "REPO_HUB=${{ vars.DOCKER_REPO_HUB || '42tape' }}" >> $GITHUB_ENV
          echo "NAME=${{ vars.IMAGE_NAME || 'app' }}" >> $GITHUB_ENV
          echo "UMF_MODE=global" >> $GITHUB_ENV
          
          # 빌드 변수 추출
          eval $(make print-env SILENT_MODE=1)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_COMMIT=$SHA8" >> $GITHUB_ENV
          
          # Outputs 설정
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "build_version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_commit=$SHA8" >> $GITHUB_OUTPUT
          
          echo "=== 빌드 정보 ==="
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "VERSION: $VERSION"
          echo "COMMIT: $SHA8"
      
      - name: 이미지 빌드
        run: |
          echo "=== Docker 이미지 빌드 ==="
          make build \
            UMF_MODE=global \
            REPO_HUB=$REPO_HUB \
            NAME=$NAME \
            ENV=$ENVIRONMENT
      
      - name: 이미지 푸시
        run: |
          echo "=== Docker 이미지 푸시 ==="
          make push
      
      - name: 빌드 정보 출력
        run: |
          echo "=== 빌드 완료 ==="
          make info | grep -A 10 "Core Variables"
      
      - name: Slack 알림 - 빌드 성공
        if: success() && vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "✅ 빌드 성공",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "소스 저장소", "value": "${{ needs.validate-payload.outputs.source_repo }}", "short": true},
                  {"title": "버전", "value": "${{ env.BUILD_VERSION }}", "short": true},
                  {"title": "서비스", "value": "${{ needs.validate-payload.outputs.service_kind }}", "short": true},
                  {"title": "환경", "value": "${{ needs.validate-payload.outputs.environment }}", "short": true},
                  {"title": "커밋", "value": "${{ env.BUILD_COMMIT }}", "short": true},
                  {"title": "이미지", "value": "${{ env.IMAGE_TAG }}", "short": false}
                ]
              }]
            }'
      
      - name: Slack 알림 - 빌드 실패
        if: failure() && vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "❌ 빌드 실패",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "소스 저장소", "value": "${{ needs.validate-payload.outputs.source_repo }}", "short": true},
                  {"title": "버전", "value": "${{ needs.validate-payload.outputs.version }}", "short": true},
                  {"title": "서비스", "value": "${{ needs.validate-payload.outputs.service_kind }}", "short": true},
                  {"title": "환경", "value": "${{ needs.validate-payload.outputs.environment }}", "short": true},
                  {"title": "워크플로우", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
                ]
              }]
            }'

  deploy:
    name: 배포 실행
    runs-on: ubuntu-latest
    needs: [validate-payload, build]
    if: |
      always() &&
      needs.validate-payload.outputs.valid == 'true' &&
      (needs.build.result == 'success' || needs.build.result == 'skipped')
    
    environment: ${{ needs.validate-payload.outputs.environment }}
    
    env:
      SOURCE_REPO: ${{ needs.validate-payload.outputs.source_repo }}
      REF: ${{ needs.validate-payload.outputs.ref }}
      VERSION: ${{ needs.validate-payload.outputs.version }}
      SERVICE_KIND: ${{ needs.validate-payload.outputs.service_kind }}
      ENVIRONMENT: ${{ needs.validate-payload.outputs.environment }}
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Python 의존성 설치
        run: |
          pip install boto3 requests
      
      - name: AWS 자격 증명 구성
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}
      
      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY || 'docker.io' }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 배포 환경 변수 설정
        run: |
          echo "DOCKER_REGISTRY=${{ vars.DOCKER_REGISTRY || 'docker.io' }}" >> $GITHUB_ENV
          echo "DOCKER_REPO_HUB=${{ vars.DOCKER_REPO_HUB || 'jinwoo-j' }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ vars.IMAGE_NAME || 'app' }}" >> $GITHUB_ENV
      
      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # EC2 호스트를 known_hosts에 추가
          ssh-keyscan -H ${{ vars.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: EC2에서 배포 실행
        run: |
          echo "=== EC2 러너 호스트에서 배포 실행 ==="
          
          # 배포 명령 구성
          DEPLOY_CMD="cd ${{ vars.EC2_DEPLOY_PATH || '/opt/runner' }} && \
            export SOURCE_REPO='$SOURCE_REPO' && \
            export REF='$REF' && \
            export VERSION='$VERSION' && \
            export SERVICE_KIND='$SERVICE_KIND' && \
            export ENVIRONMENT='$ENVIRONMENT' && \
            export DOCKER_REGISTRY='$DOCKER_REGISTRY' && \
            export DOCKER_REPO_HUB='$DOCKER_REPO_HUB' && \
            export IMAGE_NAME='$IMAGE_NAME' && \
            make deploy"
          
          # SSH를 통해 배포 실행
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              ${{ vars.EC2_USER || 'ubuntu' }}@${{ vars.EC2_HOST }} \
              "$DEPLOY_CMD"
      
      - name: Slack 알림 - 배포 성공
        if: success() && vars.SLACK_WEBHOOK_URL
        run: |
          # 빌드된 이미지 정보 가져오기
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          BUILD_VERSION="${{ needs.build.outputs.build_version }}"
          BUILD_COMMIT="${{ needs.build.outputs.build_commit }}"
          
          # 빌드가 스킵된 경우 기본값 사용
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="${{ env.DOCKER_REPO_HUB }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
            BUILD_VERSION="${{ env.VERSION }}"
          fi
          
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"🎉 배포 성공\",
              \"attachments\": [{
                \"color\": \"good\",
                \"fields\": [
                  {\"title\": \"소스 저장소\", \"value\": \"${{ env.SOURCE_REPO }}\", \"short\": true},
                  {\"title\": \"버전\", \"value\": \"$BUILD_VERSION\", \"short\": true},
                  {\"title\": \"서비스\", \"value\": \"${{ env.SERVICE_KIND }}\", \"short\": true},
                  {\"title\": \"환경\", \"value\": \"${{ env.ENVIRONMENT }}\", \"short\": true},
                  {\"title\": \"커밋\", \"value\": \"$BUILD_COMMIT\", \"short\": true},
                  {\"title\": \"이미지\", \"value\": \"$IMAGE_TAG\", \"short\": false}
                ]
              }]
            }"
      
      - name: Slack 알림 - 배포 실패
        if: failure() && vars.SLACK_WEBHOOK_URL
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "❌ 배포 실패",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "소스 저장소", "value": "${{ env.SOURCE_REPO }}", "short": true},
                  {"title": "버전", "value": "${{ env.VERSION }}", "short": true},
                  {"title": "서비스", "value": "${{ env.SERVICE_KIND }}", "short": true},
                  {"title": "환경", "value": "${{ env.ENVIRONMENT }}", "short": true},
                  {"title": "워크플로우", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
                ]
              }]
            }'
      
      - name: 실패 시 정리
        if: failure()
        run: |
          echo "=== 배포 실패 시 정리 작업 ==="
          
          # SSH 키 정리
          rm -f ~/.ssh/id_rsa
          
          # 실패 로그 수집 (선택사항)
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              ${{ vars.EC2_USER || 'ubuntu' }}@${{ vars.EC2_HOST }} \
              "cd ${{ vars.EC2_DEPLOY_PATH || '/opt/runner' }} && make logs --tail=50" || true

  summary:
    name: 워크플로우 요약
    runs-on: ubuntu-latest
    needs: [validate-payload, build, deploy]
    if: always()
    
    steps:
      - name: Slack 알림 - 워크플로우 완료
        if: vars.SLACK_WEBHOOK_URL
        run: |
          # 전체 상태 결정
          BUILD_STATUS="${{ needs.build.result }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"
          
          if [[ "$DEPLOY_STATUS" == "success" ]]; then
            OVERALL_STATUS="success"
            EMOJI="🎉"
            COLOR="good"
            TEXT="전체 워크플로우 성공"
          elif [[ "$BUILD_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
            EMOJI="❌"
            COLOR="danger"
            TEXT="빌드 실패"
          elif [[ "$DEPLOY_STATUS" == "failure" ]]; then
            OVERALL_STATUS="failure"
            EMOJI="❌"
            COLOR="danger"
            TEXT="배포 실패"
          else
            OVERALL_STATUS="unknown"
            EMOJI="⚠️"
            COLOR="warning"
            TEXT="워크플로우 완료 (일부 스킵)"
          fi
          
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{
              \"text\": \"$EMOJI $TEXT\",
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"fields\": [
                  {\"title\": \"소스 저장소\", \"value\": \"${{ needs.validate-payload.outputs.source_repo }}\", \"short\": true},
                  {\"title\": \"버전\", \"value\": \"${{ needs.validate-payload.outputs.version }}\", \"short\": true},
                  {\"title\": \"서비스\", \"value\": \"${{ needs.validate-payload.outputs.service_kind }}\", \"short\": true},
                  {\"title\": \"환경\", \"value\": \"${{ needs.validate-payload.outputs.environment }}\", \"short\": true},
                  {\"title\": \"빌드 상태\", \"value\": \"$BUILD_STATUS\", \"short\": true},
                  {\"title\": \"배포 상태\", \"value\": \"$DEPLOY_STATUS\", \"short\": true},
                  {\"title\": \"워크플로우\", \"value\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\", \"short\": false}
                ]
              }]
            }"

# 수동 트리거를 위한 워크플로우
  manual-deploy:
    name: 수동 배포
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 수동 배포 안내
        run: |
          echo "=== 수동 배포 안내 ==="
          echo "이 워크플로우는 repository_dispatch 이벤트를 통해 트리거됩니다."
          echo ""
          echo "배포를 트리거하려면 다음과 같이 API를 호출하세요:"
          echo ""
          echo "curl -X POST \\"
          echo "  -H \"Authorization: token \$GITHUB_TOKEN\" \\"
          echo "  -H \"Accept: application/vnd.github.v3+json\" \\"
          echo "  https://api.github.com/repos/\$OWNER/\$REPO/dispatches \\"
          echo "  -d '{"
          echo "    \"event_type\": \"deploy\","
          echo "    \"client_payload\": {"
          echo "      \"source_repo\": \"organization/app-name\","
          echo "      \"ref\": \"main\","
          echo "      \"version\": \"v1.0.0\","
          echo "      \"service_kind\": \"fe\","
          echo "      \"environment\": \"staging\""
          echo "    }"
          echo "  }'"
          echo ""
          echo "필수 시크릿 및 변수:"
          echo "- Secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, DOCKER_USERNAME, DOCKER_PASSWORD, EC2_SSH_PRIVATE_KEY, SLACK_WEBHOOK_URL"
          echo "- Variables: AWS_DEFAULT_REGION, DOCKER_REGISTRY, DOCKER_REPO_HUB, EC2_HOST, EC2_USER, EC2_DEPLOY_PATH, SLACK_CHANNEL"