---
alwaysApply: true
---
# setup.sh Behavior and Version Files

This repository provides a bootstrap/setup entrypoint in [setup.sh](mdc:setup.sh).

## Modes
- Local mode (inside a git repo): verifies/installs the Makefile system and hands off to make/install scripts.
- Bootstrap mode (outside a git repo): downloads the repository release/snapshot into a new directory, then integrates the Makefile system.

## Version Selection Order
- CLI provided version via `--version/-v <ref>` or positional (`vX.Y.Z`, `main`, `master`, `develop`)
- `.ums-version` pin file in project root (if present)
- Latest release tag (GitHub API fallback to ls-remote)

## Force & Debug
- `--force/-f`: reinstall/update without interactive prompts, even when current version equals desired.
- `--debug/-d`: enable detailed logs and xtrace; prints flags, context, paths, and file write locations.

## Version Files
- Installed UMF version: `$(MAKEFILE_SYSTEM_DIR)/.version`
- Pinned desired version: `.ums-version` (project root)
- Last bootstrap/desired release record: `.ums-release-version` (project root)

## Local Mode Details
- Resolves desired version (see order above).
- Installs/updates the Makefile system from a release tarball.
- Writes installed version to `$(MAKEFILE_SYSTEM_DIR)/.version`.
- Also writes `.ums-release-version` in the parent project root, and initializes `.ums-version` if missing.
- With `--force`, re-install proceeds without prompting.

## Bootstrap Mode Details
- Resolves desired version (see order above). If none available, falls back to `main` snapshot.
- Downloads into `${GITHUB_REPO}` directory.
- Records `.ums-release-version` and ensures `.ums-version` in the parent project root.
- Invokes project installer if present (prefers `install.sh init`).
- With `--force`, update proceeds without prompting.

## Notes
- `MAKEFILE_SYSTEM_DIR` defaults to `${GITHUB_REPO}` in this script.
- Positional versions: `./setup.sh v1.2.3`, `./setup.sh main`.
- Debug examples include: `[debug] wrote installed version to: .../.version`, and bootstrap/pin file writes in project root.

---
alwaysApply: true
description: How setup.sh behaves in local and bootstrap modes, scaffolding, and tarball auth
---

# setup.sh Behavior

- Modes
  - Local (inside a git repo): verifies/installs Makefile system, scaffolds missing files, then runs `make`.
  - Bootstrap (outside a git repo): downloads repo (release or branch snapshot), installs Makefile system into the new dir, scaffolds minimal files.

- Local Mode
  - Version resolution: reads `.ums-version` and `${MAKEFILE_SYSTEM_DIR}/.version` if present; otherwise fetches latest via API.
  - Installation: uses internal `install_from_release` (no delegation) to populate `.makefile-system`.
  - Scaffolding: if `Makefile` or `project.mk` is missing, creates them using `scaffold_project_files`.
    - `Makefile.universal` sets `MAKEFILE_SYSTEM_DIR ?= .makefile-system` and `MAKEFILE_DIR ?= $(MAKEFILE_SYSTEM_DIR)`.
    - All includes use `$(MAKEFILE_DIR)/makefiles/*.mk` to avoid absolute path issues.
  - Make arguments: strips `--` and defaults to `help` when no target is provided.
  - Pipefail: tar list extraction around `tar -tzf` is wrapped with `set +o pipefail`/`set -o pipefail` to avoid SIGPIPE failures.

- Bootstrap Mode
  - Selects desired version from `.ums-version` or latest release; falls back to `MAIN_BRANCH` snapshot if API lookup fails.
  - With `GITHUB_TOKEN` set, uses API tarball URLs (works for private repos); otherwise public archive URLs.
  - After extracting, runs `install_from_release` inside the new project directory and then `scaffold_project_files`.
  - Ensures `project.mk`, `Makefile`, `Makefile.universal` exist so `make help` works immediately.

- References
  - [setup.sh](mdc:setup.sh)
  - [makefiles/core.mk](mdc:makefiles/core.mk)
  - [templates/project.mk.template](mdc:templates/project.mk.template)

