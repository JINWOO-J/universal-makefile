---
alwaysApply: true
---
# setup.sh Behavior and Version Files

This repository provides a bootstrap/setup entrypoint in [setup.sh](mdc:setup.sh).

## Modes
- Local mode (inside a git repo): verifies/installs the Makefile system and hands off to make/install scripts.
- Bootstrap mode (outside a git repo): downloads the repository release/snapshot into a new directory, then integrates the Makefile system.

## Version Selection & Policy (Unified)
- Priority: `--version <ref>` > `-f/--force` > `UMS_BOOTSTRAP_POLICY`(latest|prompt|pin) > `.ums-version` (pin) > current install
- CLI version can also be positional: `vX.Y.Z`, `main`, `master`, `develop`.

### Force Rule (-f/--force)
- If `CLI_VERSION` is empty, force ignores policy/pin/prompt and uses the latest release.
- If `CLI_VERSION` is provided, install that version (reinstall if identical), with clear logs.

### Bootstrap Policy
- `UMS_BOOTSTRAP_POLICY` default is `pin`.
- `pin`: keep pin; when newer exists, just inform.
- `prompt`: on TTY, ask once if newer exists (default is Pinned). Non-interactive: keep pin.
- `latest`: always use latest.

## Force & Debug
- `--force/-f`: when no CLI version, override to latest; with CLI version, force (re)install that version. No prompts.
- `--debug/-d`: enable detailed logs and xtrace; prints flags, context, paths, and file write locations.

## Version Files
- Installed UMF version: `$(MAKEFILE_SYSTEM_DIR)/.version`
- Pinned desired version: `.ums-version` (project root)
- Last bootstrap/installed release: `.ums-release-version` (project root)
- Pin sync: when updated via latest/force/user choice, `.ums-version` is synchronized (controlled by `UPDATE_PIN=true`).

## Local Mode Details
- Apply the same unified priority/policy as bootstrap.
- If `current==pinned` and a newer exists (not forced), ask once in TTY.
- Install/update from release tarball; write installed version to `$(MAKEFILE_SYSTEM_DIR)/.version`.
- After install/update: always update `.ums-release-version`; sync `.ums-version` when `UPDATE_PIN=true`.
- `--force` performs without prompts as described above.

## Bootstrap Mode Details
- Apply unified priority/policy. If none resolved, fall back to `main` snapshot.
- Downloads into `${GITHUB_REPO}` directory.
- After install/update: always update `.ums-release-version`; ensure/sync `.ums-version` according to `UPDATE_PIN`.
- Invokes project installer if present (prefers `install.sh init`).
- `--force`: no prompts; uses latest unless CLI version provided.

## Integrity & Download Robustness
- SHA256 verification path retained (`.ums-version.sha256` or `UMS_TARBALL_SHA256`), warn-and-skip if absent.
- Tarball URLs: prefer API with token; safe mirrors handled; headers fixed.
- Retries with exponential backoff preserved.

## Notes
- `MAKEFILE_SYSTEM_DIR` defaults to `${GITHUB_REPO}`.
- Positional versions: `./setup.sh v1.2.3`, `./setup.sh main`.
- Debug examples: `[debug] wrote installed version to: .../.version`, bootstrap/pin sync logs, policy/force overrides.

## UX Scenarios
- `./setup.sh` (pin v1.0.54, latest v1.0.56, policy=pin) → keep pin; log newer available.
- `UMS_BOOTSTRAP_POLICY=prompt ./setup.sh` → TTY prompt (P/L/C/S), default Pinned.
- `./setup.sh -f` (no CLI version) → install latest without prompt; update `.ums-version` to latest.
- `./setup.sh -f v1.0.54` → force (re)install v1.0.54.
- Local repo current==pinned & newer exists & not forced → ask once in TTY.

---
alwaysApply: true
description: How setup.sh behaves in local and bootstrap modes, scaffolding, and tarball auth
---

# setup.sh Behavior

- Modes
  - Local (inside a git repo): verifies/installs Makefile system, scaffolds missing files, then runs `make`.
  - Bootstrap (outside a git repo): downloads repo (release or branch snapshot), installs Makefile system into the new dir, scaffolds minimal files.

- Local Mode
  - Version resolution: reads `.ums-version` and `${MAKEFILE_SYSTEM_DIR}/.version` if present; otherwise fetches latest via API.
  - Installation: uses internal `install_from_release` (no delegation) to populate `.makefile-system`.
  - Scaffolding: if `Makefile` or `project.mk` is missing, creates them using `scaffold_project_files`.
    - `Makefile.universal` sets `MAKEFILE_SYSTEM_DIR ?= .makefile-system` and `MAKEFILE_DIR ?= $(MAKEFILE_SYSTEM_DIR)`.
    - All includes use `$(MAKEFILE_DIR)/makefiles/*.mk` to avoid absolute path issues.
  - Make arguments: strips `--` and defaults to `help` when no target is provided.
  - Pipefail: tar list extraction around `tar -tzf` is wrapped with `set +o pipefail`/`set -o pipefail` to avoid SIGPIPE failures.

- Bootstrap Mode
  - Selects desired version from `.ums-version` or latest release; falls back to `MAIN_BRANCH` snapshot if API lookup fails.
  - With `GITHUB_TOKEN` set, uses API tarball URLs (works for private repos); otherwise public archive URLs.
  - After extracting, runs `install_from_release` inside the new project directory and then `scaffold_project_files`.
  - Ensures `project.mk`, `Makefile`, `Makefile.universal` exist so `make help` works immediately.

- References
  - [setup.sh](mdc:setup.sh)
  - [makefiles/core.mk](mdc:makefiles/core.mk)
  - [templates/project.mk.template](mdc:templates/project.mk.template)

